Edges
=====

Words about edges

AdminTo
^^^^^^^

This edge indicates that principal is a local administrator on the target
computer. By default, administrators have several ways to perform remote
code execution on Windows systems, including via RDP, WMI, WinRM, the
Service Control Manager, and remote DCOM execution.

Further, administrators have several options for impersonating other users
logged onto the system, including plaintext password extraction, token
impersonation, and injecting into processes running as another user.

Finally, administrators can often disable host-based security controls that
would otherwise prevent the aforementioned techniques.

Abuse Info
----------

There are several ways to pivot to a Windows system. If using Cobalt
Strike's beacon, check the help info for the commands "psexec", "psexec_psh",
"wmi", and "winrm". With Empire, consider the modules for Invoke-PsExec,
Invoke-DCOM, and Invoke-SMBExec.

With Metasploit, consider the modules "exploit/windows/smb/psexec",
"exploit/windows/winrm/winrm_script_exec", and
"exploit/windows/local/ps_wmi_exec".

Additionally, there are several manual methods for remotely executing code on
the machine, including via RDP, with the service control binary and
interaction with the remote machine's service control manager, and remotely
instantiating DCOM objects. For more information about these lateral movement
techniques, see the References section below.

**Gathering credentials**

The most well-known tool for gathering credentials from a Windows system is
mimikatz. mimikatz is built into several agents and toolsets, including
Cobalt Strike's beacon, Empire, and Meterpreter. While running in a high
integrity process with SeDebugPrivilege, execute one or more of mimikatz's
credential gathering techniques (e.g.: sekurlsa::wdigest,
sekurlsa::logonpasswords, etc.), then parse or investigate the output to
find clear-text credentials for other users logged onto the system.
            
You may also gather credentials when a user types them or copies them to
their clipboard! Several keylogging capabilities exist, several agents and
toolsets have them built-in. For instance, you may use meterpreter's
"keyscan_start" command to start keylogging a user, then "keyscan_dump" to
return the captured keystrokes. Or, you may use PowerSploit's
Invoke-ClipboardMonitor to periodically gather the contents of the user's
clipboard.

**Token Impersonation**

You may run into a situation where a user is logged onto the system, but
you can't gather that user's credential. This may be caused by a host-based
security product, lsass protection, etc. In those circumstances, you may
abuse Windows' token model in several ways. First, you may inject your agent
into that user's process, which will give you a process token as that user,
which you can then use to authenticate to other systems on the network. Or,
you may steal a process token from a remote process and start a thread in
your agent's process with that user's token. For more information about
token abuses, see the References tab.

**Disabling host-based security controls**

Several host-based controls may affect your ability to execute certain
techniques, such as credential theft, process injection, command line
execution, and writing files to disk. Administrators can often disable these
host-based controls in various ways, such as stopping or otherwise disabling
a service, unloading a driver, or making registry key changes. For more
information, see the References section below.

Opsec Considerations
--------------------

There are several forensic artifacts generated by the techniques described
above. For instance, lateral movement via PsExec will generate 4697 events on
the target system. If the target organization is collecting and analyzing those
events, they may very easily detect lateral movement via PsExec. 

Additionally, an EDR product may detect your attempt to inject into lsass and
alert a SOC analyst. There are many more opsec considerations to keep in mind
when abusing administrator privileges. For more information, see the References
section below.

References
----------

https://attack.mitre.org/wiki/Lateral_Movement

**Gathering Credentials**

* http://blog.gentilkiwi.com/mimikatz
* https://github.com/gentilkiwi/mimikatz
* https://adsecurity.org/?page_id=1821
* https://attack.mitre.org/wiki/Credential_Access

**Token Impersonation**

* https://labs.mwrinfosecurity.com/assets/BlogFiles/mwri-security-implications-of-windows-access-tokens-2008-04-14.pdf
* https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Invoke-TokenManipulation.ps1
* https://attack.mitre.org/wiki/Technique/T1134

**Disabling host-based security controls**

* https://blog.netspi.com/10-evil-user-tricks-for-bypassing-anti-virus/
* https://www.blackhillsinfosec.com/bypass-anti-virus-run-mimikatz/

**Opsec Considerations**

* https://blog.cobaltstrike.com/2017/06/23/opsec-considerations-for-beacon-commands/

MemberOf
^^^^^^^^

Groups in active directory grant their members any privileges the group itself
has. If a group has rights to another principal, users/computers in the group,
as well as other groups inside the group inherit those permissions.

Abuse Info
----------

No abuse is necessary. This edge simply indicates that a principal belongs to a
security group.

Opsec Considerations
--------------------

No opsec considerations apply to this edge.

References
----------

* https://adsecurity.org/?tag=ad-delegation
* https://www.itprotoday.com/management-mobility/view-or-remove-active-directory-delegated-permissions

HasSession
^^^^^^^^^^

When a user authenticates to a computer, they often leave credentials exposed on
the system, which can be retrieved through LSASS injection, token manipulation
or theft, or injecting into a user's process.

Any user that is an administrator to the system has the capability to retrieve
the credential material from memory if it still exists.

.. note:: A session does not guarantee credential material is present, only possible.

This video explains exactly how BloodHound's session data collection method works:

.. raw:: html

    <div style="text-align: center; margin-bottom: 2em;">
    <iframe width="100%" height="350" src="https://www.youtube.com/embed/q86VgM2Tafc?rel=0" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>
    </div>

Abuse Info
----------

When a user has a session on the computer, you may be able to obtain credentials for
the user via credential dumping or token impersonation. You must be able to move
laterally to the computer, have administrative access on the computer, and the user
must have a non-network logon session on the computer.

Once you have established a Cobalt Strike Beacon, Empire agent, or other implant on
the target, you can use mimikatz to dump credentials of the user that has a session
on the computer. While running in a high integrity process with SeDebugPrivilege,
execute one or more of mimikatz's credential gathering techniques (e.g.:
sekurlsa::wdigest, sekurlsa::logonpasswords, etc.), then parse or investigate the
output to find clear-text credentials for other users logged onto the system.

You may also gather credentials when a user types them or copies them to their
clipboard! Several keylogging capabilities exist, several agents and toolsets have
them built-in. For instance, you may use meterpreter's "keyscan_start" command to
start keylogging a user, then "keyscan_dump" to return the captured keystrokes. Or,
you may use PowerSploit's Invoke-ClipboardMonitor to periodically gather the contents
of the user's clipboard.

**Token Impersonation**

You may run into a situation where a user is logged onto the system, but you can't
gather that user's credential. This may be caused by a host-based security product,
lsass protection, etc. In those circumstances, you may abuse Windows' token model in
several ways. First, you may inject your agent into that user's process, which will
give you a process token as that user, which you can then use to authenticate to other
systems on the network. Or, you may steal a process token from a remote process and
start a thread in your agent's process with that user's token. For more information
about token abuses, see the References section below.

User sessions can be short lived and only represent the sessions that were present at
the time of collection. A user may have ended their session by the time you move to
the computer to target them. However, users tend to use the same machines, such as the
workstations or servers they are assigned to use for their job duties, so it can be
valuable to check multiple times if a user session has started.

Opsec Considerations
--------------------

An EDR product may detect your attempt to inject into lsass and alert a SOC analyst.
There are many more opsec considerations to keep in mind when stealing credentials or
tokens. For more information, see the References section.

References
----------

* http://blog.gentilkiwi.com/mimikatz
* https://github.com/gentilkiwi/mimikatz
* https://adsecurity.org/?page_id=1821
* https://attack.mitre.org/wiki/Credential_Access

**Token Impersonation**

* https://labs.mwrinfosecurity.com/assets/BlogFiles/mwri-security-implications-of-windows-access-tokens-2008-04-14.pdf
* https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Invoke-TokenManipulation.ps1
* https://attack.mitre.org/wiki/Technique/T1134

ForceChangePassword
^^^^^^^^^^^^^^^^^^^

This edge indicates that the principal can reset the password of the target user without
knowing the current password of that user.

To see an example of this edge being abused, see this clip from Derbycon 2017:

.. raw:: html

    <div style="text-align: center; margin-bottom: 2em;">
    <iframe width="100%" height="350" src="https://www.youtube.com/embed/z8thoG7gPd0?t=2291?rel=0" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>
    </div>

Abuse Info
----------

There are at least two ways to execute this attack. The first and most obvious is by
using the built-in net.exe binary in Windows (e.g.: net user dfm.a Password123! /domain).
See the opsec considerations section for why this may be a bad idea. The second, and
highly recommended method, is by using the Set-DomainUserPassword function in PowerView.
This function is superior to using the net.exe binary in several ways. For instance, you
can supply alternate credentials, instead of needing to run a process as or logon as the
user with the ForceChangePassword privilege. Additionally, you have much safer execution
options than you do with spawning net.exe (see the opsec info below).

To abuse this privilege with PowerView's Set-DomainUserPassword, first import PowerView
into your agent session or into a PowerShell instance at the console. You may need to
authenticate to the Domain Controller as the user with the password reset privilege if
you are not running a process as that user.

To do this in conjunction with Set-DomainUserPassword, first create a PSCredential object
(these examples comes from the PowerView help documentation):

::

  $SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
  $Cred = New-Object System.Management.Automation.PSCredential('CONTOSO\\dfm.a', $SecPassword)

Then create a secure string object for the password you want to set on the target user:

::

  $UserPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force</code>

Finally, use Set-DomainUserPassword, optionally specifying $Cred if you are not already
running within a process as the user with the password reset privilege

::

  Set-DomainUserPassword -Identity andy -AccountPassword $UserPassword -Credential $Cred

Now that you know the target user's plain text password, you can either start a new agent
as that user, or use that user's credentials in conjunction with PowerView's ACL abuse
functions, or perhaps even RDP to a system the target user has access to. For more ideas
and information, see the references section below.

Opsec Considerations
--------------------

Executing this abuse with the net binary will necessarily require command line execution.
If your target organization has command line logging enabled, this is a detection
opportunity for their analysts. 

Regardless of what execution procedure you use, this action will generate a 4724 event on
the domain controller that handled the request. This event may be centrally collected and
analyzed by security analysts, especially for users that are obviously very high
privilege groups (i.e.: Domain Admin users). Also be mindful that PowerShell v5 introduced
several key security features such as script block logging and AMSI that provide security
analysts another detection opportunity. You may be able to completely evade those features
by downgrading to PowerShell v2. 

Finally, by changing a service account password, you may cause that service to stop
functioning properly. This can be bad not only from an opsec perspective, but also a client
management perspective. Be careful!

References
----------

* https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1
* https://www.youtube.com/watch?v=z8thoG7gPd0
* https://www.sixdub.net/?p=579
* https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventID=4724

GenericAll
^^^^^^^^^^

Words about GenericAll

AddMembers
^^^^^^^^^^

Words about AddMembers

Owns
^^^^

Words about Owns

WriteDacl
^^^^^^^^^

Words about WriteDacl

WriteOwner
^^^^^^^^^^

Words about WriteOwner

GenericWrite
^^^^^^^^^^^^

Words about GenericWrite
